:Test-Layer: functional

Initialize standard test environment::

    >>> from asmmobile.testutils import initializeApplicationTestEnv, assertXml
    >>> root, app, browser = initializeApplicationTestEnv(getRootFolder())

Change the clock to be some known time::

   >>> import asmmobile.util
   >>> oldClock = asmmobile.util.clock
   >>> asmmobile.util.clock = asmmobile.util._staticTimeClock("2009-01-01-10-00")

Date creation function::

   >>> import datetime
   >>> import dateutil.tz
   >>> def createTime(timeStr):
   ...     year, month, day, hour, minute = (int(x) for x in timeStr.split("-"))
   ...     return datetime.datetime(
   ...         year, month, day, hour, minute, tzinfo=dateutil.tz.tzlocal())

Add some locations::

   >>> import datetime
   >>> locations = {
   ...     'en': {
   ...         u'cave':  {
   ...             'name': 'CAVE',
   ...             'url': 'http://cave/',
   ...             'priority': 0,
   ...             'hide-until': datetime.timedelta(seconds=60),
   ...             'major-location': None,
   ...             },
   ...         'home':  {
   ...             'name': 'HOME',
   ...             'url': 'http://home/',
   ...             'priority': 10,
   ...             'hide-until': datetime.timedelta(seconds=7200),
   ...             'major-location': None,
   ...             },
   ...         },
   ...     'fi':  {
   ...         'cave':  {
   ...             'name': 'LUOLA',
   ...             'url': 'http://cave/',
   ...             'priority': 10,
   ...             'hide-until': datetime.timedelta(seconds=7200),
   ...             'major-location': None,
   ...             },
   ...         },
   ...     }
   >>> app.updateLocations(locations)

Check that locations got added correctly::

   >>> browser.open('http://localhost/app/location/cave')
   >>> assertXml(browser)
   >>> "CAVE" in browser.contents
   True
   >>> browser.open('http://localhost/app/location/home')
   >>> assertXml(browser)
   >>> "HOME" in browser.contents
   True

Check that all locations are listed in location index::

   >>> browser.open('http://localhost/app/location')
   >>> assertXml(browser)
   >>> "HOME" in browser.contents
   True
   >>> "CAVE" in browser.contents
   True

Add some events to locations::

   >>> events = {
   ...     'en': {
   ...         u'cave_first': {
   ...             'name': 'EVFIRST',
   ...             'url': 'http://cave/first',
   ...             'start': createTime("2009-01-01-09-00"),
   ...             'end': createTime("2009-01-01-11-00"),
   ...             'location': "cave",
   ...             },
   ...         'cave_second': {
   ...             'name': 'EVSECOND',
   ...             'url': None,
   ...             'start': createTime("2009-01-01-11-00"),
   ...             'end': createTime("2009-01-01-12-00"),
   ...             'location': "cave",
   ...             'description': 'SECOND_DESCRIPTION\nSECOND_LINE',
   ...             },
   ...         'home_third': {
   ...             'name': 'EVTHIRD',
   ...             'url': 'http://home/third',
   ...             'start': createTime("2009-01-01-10-30"),
   ...             'end': createTime("2009-01-01-12-00"),
   ...             'location': "home",
   ...             },
   ...         'none_fourth': {
   ...             'name': 'NONEFOURTH',
   ...             'url': 'http://none/FOURTH',
   ...             'start': createTime("2009-01-01-09-00"),
   ...             'end': createTime("2009-01-01-11-00"),
   ...             'location': None,
   ...             },
   ...         },
   ...     'fi': {
   ...         'cave_first': {
   ...             'name': 'EVFIFIRST',
   ...             'url': 'http://cave/first',
   ...             'start': createTime("2009-01-01-09-00"),
   ...             'end': createTime("2009-01-01-11-00"),
   ...             'location': "cave",
   ...             },
   ...         }
   ...     }
   >>> app.updateEvents(events)

Check that events are visible in their respective locations::

   >>> browser.open('http://localhost/app/location/cave')
   >>> assertXml(browser)
   >>> "EVFIRST" in browser.contents
   True
   >>> "EVSECOND" in browser.contents
   True
   >>> browser.open('http://localhost/app/location/home')
   >>> "EVTHIRD" in browser.contents
   True

Check that correct information is visible in events::

   >>> browser.open('http://localhost/app/event/cave_first')
   >>> assertXml(browser)
   >>> "EVFIRST" in browser.contents
   True
   >>> 'http://cave/first' in browser.contents
   True

Check that location is visible::

   >>> "CAVE" in browser.contents
   True
   >>> "location/cave" in browser.contents
   True

Check that description is visible::

   >>> browser.open('http://localhost/app/event/cave_second')
   >>> assertXml(browser)
   >>> "SECOND_DESCRIPTION" in browser.contents
   True

Check that location is not visible when there is none::

   >>> browser.open('http://localhost/app/event/none_fourth')
   >>> assertXml(browser)
   >>> "Location" in browser.contents
   False
   >>> "location" in browser.contents
   False

Check that locations and events include edit view and need password::

   >>> browser.open('http://localhost/app/location/cave/edit') # doctest: +ELLIPSIS
   Traceback (most recent call last):
   ...
   Unauthorized: ...
   >>> browser.open('http://localhost/app/event/cave_first/edit') # doctest: +ELLIPSIS
   Traceback (most recent call last):
   ...
   Unauthorized: ...

Set authorization::

   >>> browser.addHeader('Authorization', 'Basic mgr:mgrpw')

Modify location description::

   >>> browser.open('http://localhost/app/location/cave/edit')
   >>> browser.headers.get('Status').upper()
   '200 OK'
   >>> assertXml(browser)
   >>> browser.getControl(name="form.description").value = "MOD_CAVE_DESCRIPTION\n<&"
   >>> browser.getControl("Apply").click()
   >>> "error" in browser.contents
   False
   >>> browser.open('http://localhost/app/location/cave')
   >>> assertXml(browser)
   >>> "MOD_CAVE_DESCRIPTION" in browser.contents
   True

Modify event description::

   >>> browser.open('http://localhost/app/event/cave_first/edit')
   >>> browser.headers.get('Status').upper()
   '200 OK'
   >>> assertXml(browser)
   >>> browser.getControl(name="form.description").value = "MOD_CAVE_FIRST_DESCRIPTION\n<&"
   >>> browser.getControl("Apply").click()
   >>> "error" in browser.contents
   False
   >>> browser.open('http://localhost/app/event/cave_first')
   >>> assertXml(browser)
   >>> "MOD_CAVE_FIRST_DESCRIPTION" in browser.contents
   True

Check that all events are visible in all page::

   >>> browser.open('http://localhost/app/all')
   >>> assertXml(browser)
   >>> "EVFIRST" in browser.contents
   True
   >>> "EVSECOND" in browser.contents
   True
   >>> "EVTHIRD" in browser.contents
   True
   >>> "NONEFOURTH" in browser.contents
   True

Check that all events are visible in next page::

   >>> browser.open('http://localhost/app/next')
   >>> assertXml(browser)
   >>> "EVFIRST" in browser.contents
   True
   >>> "EVSECOND" in browser.contents
   True
   >>> "EVTHIRD" in browser.contents
   True

Check that we can change the display time of next events to hide
all events::

   >>> browser.open('http://localhost/app/next?s=2007-01-01-01')
   >>> assertXml(browser)
   >>> "EVFIRST" in browser.contents
   False

Invalid time stamps should result in default behaviour::

   >>> browser.open('http://localhost/app/next?s=abbabaabaa')
   >>> assertXml(browser)
   >>> "EVFIRST" in browser.contents
   True
   >>> browser.open('http://localhost/app/next?s=2007-02-31-01')
   >>> assertXml(browser)
   >>> "EVFIRST" in browser.contents
   True

Check that non-hidden events are visible in overview page::

   >>> browser.open('http://localhost/app')
   >>> assertXml(browser)
   >>> "EVFIRST" in browser.contents
   True
   >>> "EVTHIRD" in browser.contents
   True

Second cave event is not starting in 1 hour and cave hide-until time is only
one minute so we should not see it::

   >>> "EVSECOND" in browser.contents
   False

Check that different calendar outputs have correct events::

   >>> from asmmobile.testutils import getCalendarEvents
   >>> getCalendarEvents(browser, 'http://localhost/app/all.vcs')
   [u'cave_first@localhost', u'cave_second@localhost', u'home_third@localhost', u'none_fourth@localhost']
   >>> getCalendarEvents(browser, 'http://localhost/app/location/cave/cave.vcs')
   [u'cave_first@localhost', u'cave_second@localhost']
   >>> getCalendarEvents(browser, 'http://localhost/app/location/home/home.vcs')
   [u'home_third@localhost']
   >>> getCalendarEvents(browser, 'http://localhost/app/event/cave_first/cave_first.vcs')
   [u'cave_first@localhost']

Change language and check that there is translated event selected::

   >>> browser.open('http://localhost/app/event/cave_first')
   >>> assertXml(browser)
   >>> "EVFIRST" in browser.contents
   True
   >>> "EVFIFIRST" in browser.contents
   False
   >>> browser.addHeader("Accept-Language", "fi")
   >>> browser.open('http://localhost/app/event/cave_first')
   >>> assertXml(browser)
   >>> "EVFIRST" in browser.contents
   False
   >>> "EVFIFIRST" in browser.contents
   True
   >>> "LUOLA" in browser.contents
   True

Untranslated events should still result in something::

   >>> browser.open('http://localhost/app/event/cave_second')
   >>> assertXml(browser)
   >>> "EVSECOND" in browser.contents
   True
   >>> "LUOLA" in browser.contents
   True

Check that redirection on language changes works correctly:

   >>> browser.open('http://localhost/app/event/cave_second/@@l/en')
   >>> browser.url
   'http://localhost/app/event/cave_second'

   >>> browser.addHeader("Referer", "http://localhost/app")
   >>> browser.open('http://localhost/app/event/cave_second/@@l/en')
   >>> browser.url
   'http://localhost/app'

Remove one event and check that it is removed from application events::

   >>> del(events['en']['cave_second'])
   >>> 'cave_second' in app['event']['en']
   True
   >>> app.updateEvents(events)
   >>> 'cave_second' in app['event']['en']
   False

Putting back the program clock not to mess with other tests::

   >>> asmmobile.util.clock = oldClock
